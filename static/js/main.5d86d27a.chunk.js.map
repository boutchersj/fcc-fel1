{"version":3,"sources":["logo.svg","serviceWorker.js","QuoteBox.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","QuoteBox","props","mainContent","react_default","a","createElement","id","className","this","quote","author","src","logo","alt","onClick","changeQuote","React","Component","QuoteGenerator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","quotes","data","currentIndex","Math","floor","random","currentQuote","currentAuthor","bind","assertThisInitialized","setState","src_QuoteBox","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6vFCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iICQSC,iLAtBJC,GAEP,IAAMC,EACFC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,UAAU,+BACrBC,KAAKP,MAAMQ,MACZN,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WAFb,SAGYG,KAAKP,MAAMS,QAE3B,OACEP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAML,UAAU,WAAWM,IAAI,SAEtCX,EAEHC,EAAAC,EAAAC,cAAA,UAAQC,GAAG,SAASQ,QAASN,KAAKP,MAAMc,aAAxC,sBAhBaC,IAAMC,mBCiCdC,cA9Bb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhB,QACKiB,MAAQ,CACXC,OAAQC,IACRC,aAAcC,KAAKC,MAAoB,GAAdD,KAAKE,UAC9BC,aAAc,2CACdC,cAAe,+BAEjBd,EAAKJ,YAAcI,EAAKJ,YAAYmB,KAAjBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KARRA,6EAWXX,KAAK4B,SAAS,CACZR,aAAcC,KAAKC,MAAoB,GAAdD,KAAKE,UAC9BC,aAAcxB,KAAKiB,MAAMC,OAAOlB,KAAKiB,MAAMG,cAAcnB,MACzDwB,cAAezB,KAAKiB,MAAMC,OAAOlB,KAAKiB,MAAMG,cAAclB,0CAG5D,IAAMD,EAAMD,KAAKiB,MAAMO,aACjBtB,EAAOF,KAAKiB,MAAMQ,cAClBlB,EAAYP,KAAKO,YACvB,OACEZ,EAAAC,EAAAC,cAACgC,EAAD,CACEtB,YAAaA,EACbN,MAAOA,EACPC,OAAQA,WAzBaO,aCC7BqB,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAoBC,SAASC,eAAe,SH2HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5d86d27a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport logo from './logo.svg';\r\n\r\nclass QuoteBox extends React.Component {\r\n    render(props){\r\n\r\n    const mainContent = \r\n        <div id='quote' className='container-fluid text-center'>\r\n            {this.props.quote}\r\n            <br></br><br></br>\r\n            &mdash;{this.props.author}\r\n        </div>\r\n    return (\r\n      <div className='App'>\r\n        <header className='App-header'>\r\n          <img src={logo} className='App-logo' alt=\"logo\"/>\r\n          \r\n            {mainContent}\r\n        \r\n          <button id='button' onClick={this.props.changeQuote}>New Quote</button>\r\n        </header>\r\n      </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default QuoteBox","import React, { Component } from 'react';\nimport './App.css'\nimport QuoteBox from './QuoteBox';\nimport { data } from './quotesData.json'\n\nclass QuoteGenerator extends Component {\n  constructor(){\n    super();\n    this.state = {\n      quotes: data,\n      currentIndex: Math.floor(Math.random()*20),\n      currentQuote: '\"A notable and historic jumble of words\"',\n      currentAuthor: 'Someone cool who said words'\n    }\n    this.changeQuote = this.changeQuote.bind(this);\n  }\n  changeQuote() {\n    this.setState({\n      currentIndex: Math.floor(Math.random()*20),\n      currentQuote: this.state.quotes[this.state.currentIndex].quote,\n      currentAuthor: this.state.quotes[this.state.currentIndex].author\n    })}\n  render() {\n    const quote=this.state.currentQuote\n    const author=this.state.currentAuthor\n    const changeQuote=this.changeQuote\n    return(\n      <QuoteBox\n        changeQuote={changeQuote} \n        quote={quote} \n        author={author}\n      />\n    )\n  }\n}\n\nexport default QuoteGenerator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport QuoteGenerator from './App';\n\nReactDOM.render(<QuoteGenerator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}